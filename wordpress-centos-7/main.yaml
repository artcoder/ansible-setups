---
# To install WordPress on a low-RAM CentOS 7 cloud server
#
# This assumes SSH key login, so
# set up SSH login to the remote server before running this playbook.
#
# Reads the database password and SSL files from a vault, so have the files ready:

# Make a text file named secret.yml with the contents like:
# wordpress_database_user_password: put-password-here

# Make the vault:
#   ansible-vault encrypt secret.yml
# Add the SSL files to the vault using the same password:
#   ansible-vault encrypt site.key site.crt site.ca-bundle
#
# It needs aide-email.cron, make-backups.cron, and reboot-for-updates.cron
#   in the same folder as this playbook.

# Run this with something like:
#   ansible-playbook main.yaml --ask-vault-pass


# Future plans:
# Break out the httpd / Apache tasks to a separate file
# Break out the MariaDB / MySQL tasks to a separate file
# Break out the PHP tasks to a separate file


########################
# Begin configuration

# Set which hosts get configured.
# Edit /etc/ansible/hosts to add a "wordpress" group and put your server in it.
- hosts: wordpress

# Store the database password in the file secret.yml in this format:
# wordpress_database_user_password: password-goes-here

# The user Ansible will logon to SSH on the target machine as
  remote_user: centos
  become: yes

# End configuration
########################

  vars_files:
    - "configure.yaml"
    - "secret.yml"

  tasks:
  
    # Add a swap file so yum / MariaDB can run on a low RAM machine.
    - name: Start swap file task
      import_tasks: swap-file.yaml


    - name: Add an email alias to forward root's email to
      lineinfile:
        path: /etc/aliases
        regexp: '^.?root: .*$'
        line: 'root: {{ email_to }}'
        backup: yes

    - name: Apply the email alias
      command: newaliases


    - name: Upgrade all packages
      yum:
       name: '*'
       state: latest

    - name: Set the hostname
      command: hostnamectl set-hostname {{ website_domain_name }}

    - name: Install epel-release package
      yum:
       name: epel-release
       state: latest

    - name: Install utility packages
      yum:
       name:
        - nano
        - mc
        - policycoreutils-python
        - net-tools
        - unzip
        - mailx
        - fail2ban
        - yum-cron
        - yum-utils
        - aide
        - haveged
        - chrony
       state: latest

    - name: Enable and start the haveged service for better entropy
      service:
       name: haveged
       enabled: yes
       state: started

    - name: Add fail2ban filter for Wordpress logons
      copy:
        src: './apache-wordpress-logon.conf'
        dest: '/etc/fail2ban/filter.d/apache-wordpress-logon.conf'
        backup: yes
        group: root
        owner: root
        mode: u+rw,g=r,o=r

    - name: Define fail2ban jails for logons to SSH and Wordpress
      copy:
        src: './jail.local'
        dest: '/etc/fail2ban/jail.local'
        backup: yes
        group: root
        owner: root
        mode: u+rw,g=r,o=r
        
    - name: Enable and start the fail2ban service to delay brute force attacks
      service:
       name: fail2ban
       enabled: yes
       state: started

    - name: Enable and start the firewall service
      service:
       name: firewalld
       enabled: yes
       state: started


    - name: Allow Network Time Protocol through the local firewall
      firewalld:
        service: ntp
        permanent: yes
        immediate: yes
        state: enabled

    - name: Enable and start chronyd service
      service:
        name: chronyd
        enabled: yes
        state: started


    - name: Set yum-cron to download patches daily
      lineinfile:
        path: /etc/yum/yum-cron.conf
        regexp: '^download_updates = .*$'
        line: 'download_updates = yes'
        backup: yes
        
    - name: Set yum-cron to install patches daily
      lineinfile:
        path: /etc/yum/yum-cron.conf
        regexp: '^apply_updates = .*$'
        line: 'apply_updates = yes'
        backup: yes
        
    - name: Set yum-cron to email updates
      lineinfile:
        path: /etc/yum/yum-cron.conf
        regexp: '^emit_via = .*$'
        line: 'emit_via = email'
        backup: yes

    - name: Add a cron job to reboot daily if needed for patches
      copy:
        src: './reboot-for-updates.cron'
        dest: '/etc/cron.daily/reboot-for-updates.cron'
        backup: yes
        group: root
        owner: root
        mode: u+rwx,g=rx,o=rx

    - name: Set the minimum password length
      lineinfile:
        path: /etc/security/pwquality.conf
        regexp: '^minlen = .*$'
        line: 'minlen = 12'
        backup: yes

    - name: Set the minimum character classes in password
      lineinfile:
        path: /etc/security/pwquality.conf
        regexp: '^minclass = .*$'
        line: 'minclass = 3'
        backup: yes

    - name: Initialize the AIDE database - takes about 10 minutes
      shell: aide --init && mv -n /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz
               creates="/var/lib/aide/aide.db.gz"

    - name: Add a cron job to update the AIDE database and email results
      copy:
        src: './aide-email.cron'
        dest: '/etc/cron.daily/aide-email.cron'
        backup: yes
        group: root
        owner: root
        mode: u+rwx,g=,o=

    - name: Add a cron job to make backups and delete old ones
      copy:
        src: './make-backups.cron'
        dest: '/etc/cron.weekly/make-backups.cron'
        backup: yes
        group: root
        owner: root
        mode: u+rwx,g=rx,o=rx



    - name: Install httpd packages
      yum:
       name: 
        - httpd
        - mod_ssl
       state: latest

    - name: Copy domain certificate file
      copy:
        src: "./{{ ssl_filename_heading }}.crt"
        dest: "/etc/pki/tls/certs/"
        backup: yes
        group: root
        owner: root
        mode: u+rw,g=,o=

    - name: Copy certificate authority bundle file
      copy:
        src: "./{{ ssl_filename_heading }}.ca-bundle"
        dest: "/etc/pki/tls/certs/"
        backup: yes
        group: root
        owner: root
        mode: u+rw,g=,o=
        
    - name: Copy private key file
      copy:
        src: "./{{ ssl_filename_heading }}.key"
        dest: "/etc/pki/tls/private/"
        backup: yes
        group: root
        owner: root
        mode: u+rw,g=,o=

#    - name: Redirect clients to HTTPS
#      lineinfile:
#        path: /etc/httpd/conf/httpd.conf
#        insertafter: '^Listen 80$'
#        firstmatch: yes
#        regexp: '^Redirect / https://'
#        line:  'Redirect / https://{{ website_domain_name }}/'
#        backup: yes

# Need to rewrite like this instead:
#<VirtualHost *:80>
#   ServerName {{ website_domain_name }}:80
#   Redirect permanent / https://{{ website_domain_name }}/
#</VirtualHost>

    - name: Set the web site's domain name
      lineinfile:
        path: /etc/httpd/conf.d/ssl.conf
        regexp: '^#?ServerName .*$'
        line:  'ServerName {{ website_domain_name }}:443'
        backup: yes

# Need to disable directory indexes        
#    - name: Disable directory indexes but allow SymLinks
#      lineinfile:
#        path: /etc/httpd/conf/httpd.conf
#        regexp: '^Options .*$'
#        line:  'Options FollowSymLinks'
#        backup: yes


    - name: Disable weak SSL Protocols
      lineinfile:
        path: /etc/httpd/conf.d/ssl.conf
        regexp: '^SSLProtocol .*$'
        line:  'SSLProtocol all -SSLv2 -SSLv3 -TLSv1 -TLSv1.1'
        backup: yes

    - name: Disable weak SSL Cipher Suites
      lineinfile:
        path: /etc/httpd/conf.d/ssl.conf
        regexp: '^SSLCipherSuite .*$'
        line:  'SSLCipherSuite ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256'
        backup: yes

    - name: Disable SSL Compression
      lineinfile:
        path: /etc/httpd/conf.d/ssl.conf
        insertbefore: '^\s*<VirtualHost _default_:443>'
        line:  'SSLCompression off'
        backup: yes
        
    - name: Disable SSL SessionTickets
      lineinfile:
        path: /etc/httpd/conf.d/ssl.conf
        insertbefore: '^\s*SSLCompression off'
        line:  'SSLSessionTickets off'
        backup: yes
    
    - name: Install the SSL certificate
      lineinfile:
        path: /etc/httpd/conf.d/ssl.conf
        regexp: '^#?\s*SSLCertificateFile .*$'
        line:  'SSLCertificateFile /etc/pki/tls/certs/{{ ssl_filename_heading }}.crt'
        backup: yes
        
    - name: Install the SSL certificate authority certificate chain
      lineinfile:
        path: /etc/httpd/conf.d/ssl.conf
        regexp: '^#?\s*SSLCACertificateFile .*$'
        line:  'SSLCACertificateFile /etc/pki/tls/certs/{{ ssl_filename_heading }}.ca-bundle'
        backup: yes
        
    - name: Install the SSL certificate private key
      lineinfile:
        path: /etc/httpd/conf.d/ssl.conf
        regexp: '^SSLCertificateKeyFile .*$'
        line:  'SSLCertificateKeyFile /etc/pki/tls/private/{{ ssl_filename_heading }}.key'
        backup: yes
    
    - name: Enable and start the httpd service
      service:
       name: httpd
       enabled: yes
       state: started



    - name: Install Remi's PHP repository package
      yum:
       name: https://rpms.remirepo.net/enterprise/remi-release-7.rpm
       state: latest
       
    - name: Enable Remi's PHP repository
      yum_repository:
        name: remi-php73
        description: Remi's PHP 7.3 RPM repository for CentOS $releasever
        mirrorlist: https://rpms.remirepo.net/enterprise/7.4/php73/mirror
        enabled: yes
        gpgcheck: yes
        gpgkey: https://rpms.remirepo.net/RPM-GPG-KEY-remi

    # https://make.wordpress.org/hosting/handbook/handbook/server-environment/#php-extensions
    - name: Install PHP packages
      yum:
        name:
          - php
          - php-mysql
          - php-bcmath
          - php-imagick
          - php-xml
          - php-xmlrpc
          - php-json
          - php-mbstring
          - php-ssh2
          - php-posix
        state: latest

    - name: Restart the httpd service to enable PHP
      service:
       name: httpd
       state: restarted



    - name: Enable the MariaDB repository
      yum_repository:
        name: MariaDB
        description: MariaDB repository for CentOS 7
        baseurl: https://yum.mariadb.org/10.3/centos7-amd64
        enabled: yes
        gpgkey: https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
        gpgcheck: yes
        
    - name: Install MariaDB / MySQL database packages
      yum:
       name:
        - MariaDB-server
        - MariaDB-client
        - MySQL-python
       state: latest

    - name: Enable and start the MariaDB service
      service:
       name: mariadb
       enabled: yes
       state: started

#    - name: Set the MySql root user's password
#      command: mysqladmin -u root password ""
# needs to include the db user password for future runs

    # mysql -u root
    # mysql> CREATE DATABASE wordpress;
    - name: Create a database for WordPress
      mysql_db:
        name: wordpress
        state: present

    # mysql> CREATE USER 'wordpress'@'localhost' IDENTIFIED BY 'password';
    # mysql> GRANT ALL PRIVILEGES ON wordpress.* TO 'wordpress'@'localhost';
    # mysql> FLUSH PRIVILEGES;
    # or later use
    # mysql> ALTER USER 'wordpress'@'localhost' IDENTIFIED BY 'New-Password-Here';

    - name: Create user and set password for WordPress to login to database with
      mysql_user:
        name: wordpress
        state: present
        priv: wordpress.*:ALL
        password: "{{ wordpress_database_user_password }}"

#   Need to do the equivalent of run mysql_secure_installation 



    - name: Download and extract the WordPress installation archive
      unarchive:
        src: https://wordpress.org/latest.tar.gz
        dest: ~/
        remote_src: yes
        creates: ~/wordpress
        
    - name: Copy WordPress files to the web site root folder
      command: cp -r ~/wordpress/. /var/www/html
      args:
        creates: /var/www/html/wp-settings.php

# Need to add this to the end of the file wp-config.php to allow updates without FTP / SSH
#   define('FS_METHOD', 'direct');


    # change the file owner and permissions for the WordPress files
    - name: Give "apache" permissions to the WordPress folder
      file:
        path: /var/www/html
        owner: apache
        group: apache
        mode: 0755
        #To do: change to 0750 for directories, 0640 for files
        recurse: yes
      tags: apache-permissions
        
    # Tell SElinux to allow writes for WP install
    # semanage fcontext -a -t httpd_sys_rw_content_t "/var/www/html(/.*)?" 
    # sudo restorecon -R -v /var/www/html/
    # /var/www/html/uploads
    - name: Allow httpd to modify WordPress files for updates
      sefcontext:
        target: '/var/www/html(/.*)?'
        setype: httpd_sys_rw_content_t
        state: present
      tags: apache-permissions

    - name: Apply SELinux file context
      command: restorecon -i -R /var/www/html
      tags: apache-permissions


    - name: Allow HTTP through the local firewall
      firewalld:
        service: http
        permanent: yes
        immediate: yes
        state: enabled

    - name: Allow HTTPS through the local firewall
      firewalld:
        service: https
        permanent: yes
        immediate: yes
        state: enabled

    # Run the web based installation from a browser

...